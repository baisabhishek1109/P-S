{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fnil\fcharset0 MarkerFelt-Thin;}
{\colortbl;\red255\green255\blue255;\red12\green27\blue21;\red205\green205\blue205;\red26\green26\blue26;
\red59\green0\blue164;\red34\green21\blue67;}
{\*\expandedcolortbl;;\cspthree\c7080\c13603\c10740;\csgray\c84070;\csgray\c13536;
\csgenericrgb\c23137\c0\c64314;\cssrgb\c17716\c12301\c33221;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15380\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs96 \cf2 \cb3 Print Binary Tree in Vertical order\
\

\fs72 Trick is :\
		When we try to traverse it int vertical order height of the left sub tree decreases and height of the right subtree increases.\cf4  \
\
\
Algo for traversing:\
			\
		travers(root,level)\{\
				if(level == 0)\
					print(root.data)\
				if(root == null)\
					return;\
				else\{\
					travers(root.left,level-1);\
					traverse(root.right,level+1);\
				\}\
		\}\
\
	It may print tree in vertical order considering that we are moving bottom to top in left subtree and top to bottom in right sub tree.\
\
\
time complexity = O(n)\
\
since size of the problem is not decreasing.\
\
\
\
\
					\
\
\
 \
\cf5 \
\
\
\cf6 \
\
}