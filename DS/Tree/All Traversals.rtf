{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fnil\fcharset0 MarkerFelt-Thin;}
{\colortbl;\red255\green255\blue255;\red34\green21\blue67;\red191\green191\blue191;}
{\*\expandedcolortbl;;\cssrgb\c17716\c12301\c33221;\csgray\c79525;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15340\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs48 \cf2 Provide best tree traversal method?\
\
Possible traversal methods are:\
\
	-> Inorder\
	-> Preorder\
	-> Post order\
	-> Level Order\
\
\
If Node of the tree is like:\
		\
	class Node\{\
		int data;\
		Node left;\
		Node right;\
	\}\
\
  Node root;\
\
Level order : \
method 1:\
\
  void printNodeAtLevel (root,level)\{\
		if (level == 1)\
			console.log(root.data)\
		else\{			                                     printNodeAtLevel(root.left,level-1)\
printNodeAtLevel(root.right,level-1)\
		\}\
	\}\
\
int getHeight(root)\{\
	if (root == null)\
		return 0;\
	else\
		return getHeight(root.left) + 1 + getHeight(root.right);\
\}\
\
void levelOrder(root)\{\
	\
	height = getHeight(root);\
	for(i=1;i<=Height;i++)\
		printLevelOrder(root,i);\
\}\
\
 time complexity = O(n*h)\
where n is the number of nodes\
h is the height of the tree\
\
method 2:\
\
Using a queue\
	steps:\
		-> Pick start node\
		-> add its childrens to the queue\
		-> get item from the queue\
		-> repeat step 1 to 3 till queue is not empty\
\
\
  Node queue[];\
  int front = -1, rear = -1;\
	\
  void enqueue(node)\{\
		if(front == -1)\{\
			front++;\
			rear++;\
			queue[rear] = node;\
		\}\
	else\{\
			rear++;\
			queue[rear] = node;\
		\}\
\}\
\
Node dequeue()\{\
	if(front == -1)\{\
		console.log(\'91queue is empty\'92);\
		return;\
	\}\
	else\{\
		temp = queue[front];\
		front\'97;\
		return tem[;\
	\}\
\}\
\
bool isEmpty()\{\
	if(front == -1)\
		return true;\
	return false;\
\}\
\
void levelOrder(root)\{\
	 do\{\
		if(root.left != null)\
			enqueue(root.left);\
		if(root.right != null)\
			enqueue(root.right);\
		console.log(root.data);\
		root = dequeue();\
	\}while(!isEmpty());\
\}\
\
time complexity = O(n)  [to print all elements from the queue]\
			\
\
	\
\
\

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 Inorder traversal:\cell 
\pard\intbl\itap1\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 Preorder Traversal:\cell 
\pard\intbl\itap1\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 Postorder Traversal:\cell 
\pard\intbl\itap1\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 Level Order:\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadl100 \clpadr100 \gaph\cellx2160
\clvertalc \clshdrawnil \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadl100 \clpadr100 \gaph\cellx4320
\clvertalc \clshdrawnil \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadl100 \clpadr100 \gaph\cellx6480
\clvertalc \clshdrawnil \clbrdrt\brdrs\brdrw20\brdrcf3 \clbrdrl\brdrs\brdrw20\brdrcf3 \clbrdrb\brdrs\brdrw20\brdrcf3 \clbrdrr\brdrs\brdrw20\brdrcf3 \clpadl100 \clpadr100 \gaph\cellx8640
\pard\intbl\itap1\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
\
	left sub tree -> root -> right sub tree\
\
     For the given tree\
\
     	   1\
		/    \\\
	  2         3\
	/  \\\
    4     5\
\
	output -> 42513\
\
   void inorder(root)\{\
	\
		if(root == null)\
			return;\
		else\{\
			inorder(root.left);\
			console.log(root.data);\
			inorder(root.right);\
		\}\
\
 time complexity = O(n)\cell 
\pard\intbl\itap1\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
	 root -> left sub tree -> right sub tree\
\
     For the given tree\
\
     	   1\
		/    \\\
	  2         3\
	/  \\\
    4     5\
\
	output -> 12453\
\
   void preorder(root)\{\
	\
		if(root == null)\
			return;\
		else\{\
			console.log(root.data);\
              preorder(root.left);\
			preorder(root.right);\
		\}\
\
 time complexity = O(n)\cell 
\pard\intbl\itap1\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
	left sub tree -> right sub tree -> root\
\
     For the given tree\
\
     	   1\
		/    \\\
	  2         3\
	/  \\\
    4     5\
\
	output -> 45231\
\
   void postorder(root)\{\
	\
		if(root == null)\
			return;\
		else\{\
              postorder(root.left);\
			posteorder(root.right);\
              console.log(root.data);\
		\}\
\
 time complexity = O(n)\cell 
\pard\intbl\itap1\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
	Level wise, from root to end node. Level by Level\
\
     For the given tree\
\
     	   1\
		/    \\\
	  2         3\
	/  \\\
    4     5\
\
	output -> 12345\
\
Recommended approach :  Method2  \cell \lastrow\row
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 		\
	\
\
\
\
}